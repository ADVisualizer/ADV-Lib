buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id 'com.github.spotbugs' version '1.6.0'
}

/****************************************
 * instructions for all projects
 ****************************************/
allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'com.bmuschko.nexus'

    archivesBaseName = 'adv-lib'
    group = 'ch.hsr.adv'
    version = '0.3'

    repositories {
        mavenCentral()
    }

    sourceCompatibility = 1.9
    targetCompatibility = 1.9
}

/****************************************
 * instructions for each sub project
 ****************************************/
subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'

    checkstyle {
        ignoreFailures = false
        showViolations = true
        configFile = file("${project.rootDir}/checkstyle.xml")
        checkstyleTest.enabled = false
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    spotbugs {
        excludeFilter = file("$project.rootDir/excludeFilter.xml")
    }

    // To generate an HTML report instead of XML
    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    // common dependencies
    dependencies {
        //only use slf4j implementation (e.g. logback) in core
        compile "org.slf4j:slf4j-api:1+"
        compile group: 'com.google.inject', name: 'guice', version: '4.2.0'

        testCompile "junit:junit:4+"
        testCompile 'org.jukito:jukito:1+'
    }
}

/****************************************
 * Single library jar containing all sub projects and 3rd party dependencies
 ****************************************/
configurations {
    childJars
}

dependencies {
    subprojects.each {
        childJars project(it.path)
    }
}

jar {
    dependsOn configurations.childJars
    exclude('**/logback.xml')
    from { configurations.childJars.collect { zipTree(it) } }
}

task jacocoRootReport(type: JacocoReport) {

    dependsOn = subprojects.test

    description = 'Generates an aggregate report from all subprojects'

    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    onlyIf = {
        true
    }
}

check.finalizedBy(jacocoRootReport)

/****************************************
 * Nexus deployment (needed for Maven Central)
 ****************************************/
modifyPom {
    project {
        name 'Algorithm & Data Structure Visualizer'
        description 'ADV Lib component which provides common data structures which can be visualized in the ADV UI'
        url 'https://github.com/ADVisualizer'
        inceptionYear '2018'

        scm {
            url 'https://github.com/ADVisualizer/ADV-Lib'
            connection 'https://git@github.com/ADVisualizer/ADV-Lib.git'
            developerConnection 'scm:git:https://github.com/ADVisualizer/ADV-Lib.git'
        }

        licenses {
            license {
                name 'GNU AFFERO GENERAL PUBLIC LICENSE, Version 3.0'
                url 'https://www.gnu.org/licenses/agpl.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'mwieland'
                name 'Michael Wieland'
                email 'mwieland@hsr.ch'
            }
            developer {
                id 'mtrentini'
                name 'Muriele Trentini'
                email 'mtrentin@hsr.ch'
            }
        }
    }
}

extraArchive {
    sources = true
    tests = false
    javadoc = true
}

nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
}



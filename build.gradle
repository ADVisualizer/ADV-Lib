plugins {
    id 'com.github.spotbugs' version '1.6.0'
    id "com.jfrog.bintray" version "1.8.0"
}

group = 'ch.hsr.adv'
version = '0.3'

/****************************************
 * instructions for all projects
 ****************************************/
allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url "https://dl.bintray.com/adv/adv"
        }
    }

    sourceCompatibility = 1.9
    targetCompatibility = 1.9
}

/****************************************
 * instructions for each sub project
 ****************************************/
subprojects {

    checkstyle {
        ignoreFailures = false
        showViolations = true
        configFile = file("${project.rootDir}/checkstyle.xml")
        checkstyleTest.enabled = false
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    spotbugs {
        excludeFilter = file("$project.rootDir/excludeFilter.xml")
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    // common dependencies
    dependencies {
        compile 'ch.hsr.adv:adv-commons:0.3'

        //only use slf4j implementation (e.g. logback) in core
        compile "org.slf4j:slf4j-api:1+"
        compile group: 'com.google.inject', name: 'guice', version: '4.2.0'

        testCompile "junit:junit:4+"
        testCompile 'org.jukito:jukito:1+'
    }
}

/****************************************
 * Single library "fat-jar" containing all sub projects and 3rd party dependencies
 ****************************************/
configurations {
    childJars
}

dependencies {
    subprojects.each {
        childJars project(it.path)
    }
}

jar {
    dependsOn configurations.childJars
    exclude('**/logback.xml')
    from { configurations.childJars.collect { zipTree(it) } }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

/****************************************
 * Test coverage upload
 ****************************************/
task jacocoRootReport(type: JacocoReport) {

    dependsOn = subprojects.test

    description = 'Generates an aggregate report from all subprojects'

    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    onlyIf = {
        true
    }
}

check.finalizedBy(jacocoRootReport)

/****************************************
 * Bintray deployment (needed for Maven Central)
 ****************************************/
bintray {
    user = System.getenv('BINTRAY_USER') // bintray username (not organisation)
    key = System.getenv('BINTRAY_KEY')   // api-key
    override = true
    publish = true
    filesSpec {
        from 'build/libs'
        into '.'
    }

    publications = ['MavenCustom']
    pkg {
        repo = 'adv'
        name = 'adv-lib'
        userOrg = 'adv'
        licenses = ['AGPL-V3']
        websiteUrl = 'https://github.com/ADVisualizer/ADV-Lib'
        issueTrackerUrl = 'https://github.com/ADVisualizer/ADV-Lib/issues'
        vcsUrl = 'https://github.com/ADVisualizer/ADV-Lib.git'
        githubRepo = 'ADVisualizer/ADV-Lib'
    }
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name 'GNU AFFERO GENERAL PUBLIC LICENSE, Version 3.0'
            url 'https://www.gnu.org/licenses/agpl.txt'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'mwieland'
            name 'Michael Wieland'
            email 'mwieland@hsr.ch'
        }
        developer {
            id 'mtrentini'
            name 'Muriele Trentini'
            email 'mtrentin@hsr.ch'
        }
    }

    scm {
        url 'https://github.com/ADVisualizer/ADV-Lib'
        connection 'https://git@github.com/ADVisualizer/ADV-Lib.git'
        developerConnection 'scm:git:https://github.com/ADVisualizer/ADV-Lib.git'
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        MavenCustom(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId project.group
            artifactId project.name
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'ADV Library Project')
                root.appendNode('name', 'ADV Lib')
                root.appendNode('url', 'https://github.com/ADVisualizer/ADV-Lib')
                root.children().last() + pomConfig
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenCustomPublication {
        destination = file("$buildDir/libs/${project.name}-${project.version}.pom")
    }
}
